<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs) - Information on new language features, and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Sat, 25 Feb 2023 12:44:46 GMT</lastBuildDate>
    <item>
      <title>PEP 708: Extending the Repository API to Mitigate Dependency Confusion Attacks</title>
      <link>https://peps.python.org/pep-0708/</link>
      <description>Dependency confusion attacks, in which a malicious package is installed instead of the one the user expected, are an increasingly common supply chain threat. Most such attacks against Python dependencies, including the recent PyTorch incident, occur with multiple package repositories, where a dependency expected to come from one repository (e.g. a custom index) is installed from another (e.g. PyPI).</description>
      <author>Donald Stufft (donald@stufft.io)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0708/</guid>
      <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 706: Filter for tarfile.extractall</title>
      <link>https://peps.python.org/pep-0706/</link>
      <description>The extraction methods in :external+py3.11:mod:`tarfile` gain a filter argument, which allows rejecting files or modifying metadata as the archive is extracted. Three built-in named filters are provided, aimed at limiting features that might be surprising or dangerous. These can be used as-is, or serve as a base for custom filters.</description>
      <author>Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0706/</guid>
      <pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 704: Require virtual environments by default for package installers</title>
      <link>https://peps.python.org/pep-0704/</link>
      <description>This PEP recommends that package installers like pip  require a virtual environment by default on Python 3.13+.</description>
      <author>Pradyun Gedam (pradyunsg@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0704/</guid>
      <pubDate>Mon, 16 Jan 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 703: Making the Global Interpreter Lock Optional in CPython</title>
      <link>https://peps.python.org/pep-0703/</link>
      <description>CPython's global interpreter lock ("GIL") prevents multiple threads from executing Python code at the same time.  The GIL is an obstacle to using multi-core CPUs from Python efficiently.  This PEP proposes adding a build configuration (--disable-gil) to CPython to let it run Python code without the global interpreter lock and with the necessary changes needed to make the interpreter thread-safe.</description>
      <author>Sam Gross (colesbury at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0703/</guid>
      <pubDate>Mon, 09 Jan 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 702: Marking deprecations using the type system</title>
      <link>https://peps.python.org/pep-0702/</link>
      <description>This PEP adds an @typing.deprecated() decorator that marks a class or function as deprecated, enabling static checkers to warn when it is used. By default, this decorator will also raise a runtime DeprecationWarning.</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0702/</guid>
      <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 701: Syntactic formalization of f-strings</title>
      <link>https://peps.python.org/pep-0701/</link>
      <description>This document proposes to lift some of the restrictions originally formulated in PEP 498 and to provide a formalized grammar for f-strings that can be integrated into the parser directly. The proposed syntactic formalization of f-strings will have some small side-effects on how f-strings are parsed and interpreted, allowing for a considerable number of advantages for end users and library developers, while also dramatically reducing the maintenance cost of the code dedicated to parsing f-strings.</description>
      <author>Pablo Galindo (pablogsal@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0701/</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 8104: 2023 Term Steering Council election</title>
      <link>https://peps.python.org/pep-8104/</link>
      <description>This document describes the schedule and other details of the December 2022 election for the Python steering council, as specified in PEP 13. This is the steering council election for the 2023 term (i.e. Python 3.12).</description>
      <author>Ee Durbin (ee@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-8104/</guid>
      <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 700: Additional Fields for the Simple API for Package Indexes</title>
      <link>https://peps.python.org/pep-0700/</link>
      <description>PEP 691 defined a JSON form for the "Simple Repository API". This allowed clients to more easily query the data that was previously only available in HTML, as defined in PEP 503.</description>
      <author>Paul Moore (p.f.moore@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0700/</guid>
      <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 699: Remove private dict version field added in PEP 509</title>
      <link>https://peps.python.org/pep-0699/</link>
      <description>PEP 509 introduced a private ma_version_tag field for dictionaries to allow optimizations in CPython and extension libraries. This PEP proposes to rescind PEP 509 and declare the field an implementation detail, as it has already been superseded by alternatives. This will further allow the field to be reused for future optimization.</description>
      <author>Ken Jin (kenjin@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0699/</guid>
      <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 698: Override Decorator for Static Typing</title>
      <link>https://peps.python.org/pep-0698/</link>
      <description>This PEP proposes adding an @override decorator to the Python type system. This will allow type checkers to prevent a class of bugs that occur when a base class changes methods that are inherited by derived classes.</description>
      <author>Steven Troxler (steven.troxler@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0698/</guid>
      <pubDate>Mon, 05 Sep 2022 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
